Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 python-coffin (0.3.8-1) unstable; urgency=medium
 .
   * Initial release. (Closes: #XXXXXX)
Author: Thomas Goirand <zigo@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- python-coffin-0.3.8.orig/tests/test_defaultfilters.py
+++ python-coffin-0.3.8/tests/test_defaultfilters.py
@@ -72,8 +72,8 @@ def test_floatformat():
 
 def test_date_stuff():
     from coffin.common import env
-    assert r('a{{ d|date("Y") }}b', {'d': date(2007, 01, 01)}) == 'a2007b'
-    assert r('a{{ d|time("H") }}b', {'d': datetime(2007, 01, 01, 12, 01, 01)}) == 'a12b'
+    assert r('a{{ d|date("Y") }}b', {'d': date(2007, 1, 1)}) == 'a2007b'
+    assert r('a{{ d|time("H") }}b', {'d': datetime(2007, 1, 1, 12, 1, 1)}) == 'a12b'
     # TODO: timesince, timeuntil
 
     # Make sure the date filters can handle unset values gracefully.
--- python-coffin-0.3.8.orig/tests/test_defaultags.py
+++ python-coffin-0.3.8/tests/test_defaultags.py
@@ -70,14 +70,14 @@ def test_url():
         ('{% url urls_app.views.index as url %}{{url}}', {}, '/url_test/'),
         ('{% url inexistent as url %}{{ url }}', {}, ''),    # no exception
     ):
-        print template, '==', expected_result
+        print(template, '==', expected_result)
         try:
             actual_result = env.from_string(template).render(context)
         except Exception, e:
-            print '==> %s: (%s)' % (type(e), e)
+            print('==> %s: (%s)' % (type(e), e))
             assert type(e) == expected_result
         else:
-            print '==> %s' % actual_result
+            print('==> %s' % actual_result)
             assert actual_result == expected_result
 
 
--- python-coffin-0.3.8.orig/coffin/contrib/auth/views.py
+++ python-coffin-0.3.8/coffin/contrib/auth/views.py
@@ -8,14 +8,14 @@ from django.contrib.auth.views import *
 from coffin.shortcuts import render_to_response
 from coffin.template import RequestContext, loader
 
-exec inspect.getsource(logout)
-exec inspect.getsource(password_change_done)
-exec inspect.getsource(password_reset)
-exec inspect.getsource(password_reset_confirm)
-exec inspect.getsource(password_reset_done)
-exec inspect.getsource(password_reset_complete)
+exec(inspect.getsource(logout))
+exec(inspect.getsource(password_change_done))
+exec(inspect.getsource(password_reset))
+exec(inspect.getsource(password_reset_confirm))
+exec(inspect.getsource(password_reset_done))
+exec(inspect.getsource(password_reset_complete))
 
-exec inspect.getsource(password_change.view_func)
+exec(inspect.getsource(password_change.view_func))
 password_change = login_required(password_change)
 
 # XXX: this function uses a decorator, which calls functools.wraps, which compiles the code
--- python-coffin-0.3.8.orig/coffin/contrib/auth/urls.py
+++ python-coffin-0.3.8/coffin/contrib/auth/urls.py
@@ -2,5 +2,5 @@ import inspect
 
 from django.contrib.auth import urls
 
-exec inspect.getsource(urlpatterns)\
-        .replace('django.contrib.auth.views', 'coffin.contrib.auth.views')
\ No newline at end of file
+exec(inspect.getsource(urlpatterns)\
+        .replace('django.contrib.auth.views', 'coffin.contrib.auth.views'))
\ No newline at end of file
--- python-coffin-0.3.8.orig/coffin/contrib/flatpages/middleware.py
+++ python-coffin-0.3.8/coffin/contrib/flatpages/middleware.py
@@ -3,4 +3,5 @@ import inspect
 from django.contrib.flatpages.middleware import *
 from coffin.contrib.flatpages.views import flatpage
 
-exec inspect.getsource(FlatpageFallbackMiddleware)\
+exec(inspect.getsource(FlatpageFallbackMiddleware)\
+)
\ No newline at end of file
--- python-coffin-0.3.8.orig/coffin/template/defaultfilters.py
+++ python-coffin-0.3.8/coffin/template/defaultfilters.py
@@ -12,6 +12,8 @@ from jinja2.runtime import Undefined
 # from jinja2 import Markup
 from jinja2 import filters
 
+import six
+
 register = Library()
 
 def url(view_name, *args, **kwargs):
@@ -26,14 +28,14 @@ register.object(url)
 @register.jinja2_filter(jinja2_only=True)
 def timesince(value, *arg):
     if value is None or isinstance(value, Undefined):
-        return u''
+        return six.u('')
     from django.utils.timesince import timesince
     return timesince(value, *arg)
 
 @register.jinja2_filter(jinja2_only=True)
 def timeuntil(value, *args):
     if value is None or isinstance(value, Undefined):
-        return u''
+        return six.u('')
     from django.utils.timesince import timeuntil
     return timeuntil(value, *args)
 
@@ -41,7 +43,7 @@ def timeuntil(value, *args):
 def date(value, arg=None):
     """Formats a date according to the given format."""
     if value is None or isinstance(value, Undefined):
-        return u''
+        return six.u('')
     from django.conf import settings
     from django.utils import formats
     from django.utils.dateformat import format
@@ -59,7 +61,7 @@ def date(value, arg=None):
 def time(value, arg=None):
     """Formats a time according to the given format."""
     if value is None or isinstance(value, Undefined):
-        return u''
+        return six.u('')
     from django.conf import settings
     from django.utils import formats
     from django.utils.dateformat import time_format
@@ -122,7 +124,7 @@ def floatformat(value, arg=-1):
     return result
 
 @register.jinja2_filter(jinja2_only=True)
-def default(value, default_value=u'', boolean=True):
+def default(value, default_value=six.u(''), boolean=True):
     """Make the default filter, if used without arguments, behave like
     Django's own version.
     """
--- python-coffin-0.3.8.orig/coffin/template/defaulttags.py
+++ python-coffin-0.3.8/coffin/template/defaulttags.py
@@ -1,10 +1,11 @@
-ï»¿from jinja2 import nodes
+from jinja2 import nodes
 from jinja2.ext import Extension
 from jinja2.exceptions import TemplateSyntaxError
 from jinja2 import Markup
 from django.conf import settings
 from coffin.template import Library
 
+import six
 
 class LoadExtension(Extension):
     """The load-tag is a no-op in Coffin. Instead, all template libraries
@@ -337,7 +338,7 @@ class CacheExtension(Extension):
             raise TemplateSyntaxError('"%s" tag got a non-integer timeout '
                 'value: %r' % (list(self.tags)[0], expire_time), lineno)
 
-        args_string = u':'.join([urlquote(v) for v in vary_on])
+        args_string = six.u(':').join([urlquote(v) for v in vary_on])
         args_md5 = md5_constructor(args_string)
         cache_key = 'template.cache.%s.%s' % (fragm_name, args_md5.hexdigest())
         value = cache.get(cache_key)
